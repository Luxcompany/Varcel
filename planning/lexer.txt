LEXER

-------------------------

TYPE CHANGE OR END OF FILE TRIGGERS UNIT TOKENIZATION
    parse string from cur to offset-1
    cur = offset-1

Token analysis type details      iden-char=abc...ABC...  number-char=123...  special-char=(operator first chars)

    identifier      iden-char  +  mix-of iden-char*n || number-char*n  +  whitespace || special-char
    operator        special-char  +  check-next * n
        OPERATOR CHECKING TREE:
            +
                +=
                ++
            -
                -=
                --
            *
                *=
                **
            /
                /=
            %
                %=
            =
                ==
            >
                >=
                >>
            <
                <=
                <<
            &
                &&
            |
                ||
            ^
                ^^
            !
                !=
            .
                ..
            ~
            @
            ?
            :
            [
            ]
            (
            )
            ,
    numliteral      number-char*n  +  non-number-char(except . b x e)
        decimal     3.14
        binary      0b00010110
        hex         0x4f4f3e
        sci         10e100
    strliteral      quote + ... + quote(without backslash)

-------------------------

Monitors: current type (curType) = unknown, current index in src (curIndex) = 0, current offset of current index (curOffset) = curIndex+1

check type if unknown -- iden-char = identifier, special-char = operator, number-char = numLiteral, quote = strliteral

if type is
    identifier
        increase curOffset while iden-chars or number-chars
    operator
        compare next chars with operator tree, and identify operator
    numliteral
        increase curOffset until not number-char (except . b x e)
    strliteral
        increase curOffset until quote that isn't following backslash 

with type: tokenize src from curIndex to curIndex+curOffset-1
type = unknown
++curOffset until non-whitespace
curIndex=curOffset-1


-------------------------OLD LEXER-------------------------


//LEXER (ended up not working)

v[x..]=x

/*stepping through above

v                   continue - stream type init: identifier
v[                  stop - stream type changed: seperator
    identifier: v

[x                  stop - stream type changed: identifier
    seperator: [

x.                  stop - stream type changed: CHECK NEXT------|
    identifier: x                                               |
                                                                |
..                  continue - stream type checked: operator----|
..]                 stop - stream type changed: seperator
    operator: ..

]=                  stop - stream type changed: operator
    seperator: ]

=x                  stop - stream type changed: identifier
    operator: =

x\EOF               stop - end of file
    identifier: x

done

*/

v [ x .. ] = x

/*stepping through above

v                   continue - stream type init: identifier
v_                  stop - identifier + whitespace
    identifier: v

_[                  stop - stream type changed: seperator
    ignore whitespace

[_                  continue
[_x                 stop - stream type changed: identifier
    seperator: [

x_                  stop - identifier + whitespace
    identifier: x

_.                  stop - stream type changed: CHECK NEXT----|
    ignore whitespace                                         |
                                                              |
..                  continue - stream type checked: operator--|
.._                 continue
.._]                stop - stream type changed: seperator
    operator: ..

]_                  continue
]_=                 stop - stream type changed: operator
    seperator: ]

=_                  continue
=_x                 stop - stream type changed: identifier
    operator: =

x\EOF               stop - end of file
    identifier: x

done

*/

hidden appendCommas[v] = for v@i: concat[v@i, ","]

/*stepping through above

h                   continue - stream type init: identifier
...                 
hiden               continue
hidden_             stop - identifier + whitespace
    keyword: hidden

_a                  continue
...
_appendCommas       continue
_appendCommas[      stop - stream type changed: seperator
    identifier: appendCommas

[v                  stop - stream type changed: identifier
    seperator: [

v]                  stop - stream type changed: seperator
    identifier: v

]_                  continue
]_=                 stop - stream type changed: operator
    seperator: ]

=_                  continue
=_f                 stop - stream type changed: identifier
    operator: =

fo                  continue
for                 continue
for_                stop: identifier + whitespace
    keyword: for

_v
_v@                 stop - stream type changed: operator
    identifier: v

@i                  stop - stream type changed: identifier
    operator: @

i:                  stop - stream type changed: operator
    identifier: i

:_                  continue
:_c                 stop - stream type changed: identifier
    operator: :

co                  continue
...
concat              continue
concat[             stop - stream type changed: seperator
    identifier: concat

[v                  stop - stream type changed: identifier
    seperator: [

v@                 stop - stream type changed: operator
    identifier: v

@i                  stop - stream type changed: identifier
    operator: @

i,                  stop - stream type changed: seperator
    identifier: i

,_                  continue
,_"                 stop - stream type changed: literalStr
    operator: ,

",                  continue
","                 stop - stream type changed: CHECK NEXT-----|
    literal: ","                                               |
                                                               |
]                   continue - stream type checked: seperator--|
]\EOF               stop - end of file
    seperator: ]

done

*/

b=2
a1=[1,[2,3]]

/*stepping through above

b                   continue - stream type init: identifier
b=                  stop - stream type changed: operator
    identifier: b

=2                  stop - stream type changed: literalNum
    operator: =

2\n                 stop - literalNum + whitespace
    literal: 2

\na                 stop - stream type changed
    ignore whitespace       

a1                  continue
a1=                 stop - stream type changed: operator
    identifier: a1

=[                  stop - stream type changed: seperator
    operator: =

[1                  stop - stream type changed: literalNum
    seperator: [

1,                  stop - stream type changed: seperator
    literal: 1

,[                  

*/