//-VARCEL 1.0 DRAFT-//

//line comment

/*
multiline
comment
*/

/*
COMPILER MESSAGE FORMAT:
[ERR] message\n
[WARNING] message\n
[INFO] message\n
*/

//file extentions      .VL     .VARCEL     VL prefered

/*

catagorized lexemes:

//identifier
names of variables/lambdas/etc

//literal
numbers and strings -- 1.3  100 "Hello world"

//seperators
whitespace
[]
()
,

//operators
+   +=  ++
-   -=  --
*   *=  **
/   /= 
%   %=

=       ==
>   >=  >>
<   <=  <<
&       &&
|       ||
^       ^^
~
!   !=

        ..
@

?           :

//keywords (including types)
arr     sizeof
const   mut     freeze
uses    hidden
strict
istype  alias

real    int 
lambda 
amb
string

--------------------------------------

operators, seperators, syntax, etc (with uses):

//typical math operators
a+b
a-b
a*b
a/b
a%b

//typical c-like operators
a++
++a
a--
--a
a+=b
a-=b
a/=b
a*=b
a%=b


//typical bitwise operators
a<<b
a>>b
a&b
a|b
a^b
~a

num1 ** num2					//num1 to the power of num2 -- I.E. 4**3 = 4*4*4

head = body						//assigns head to evaluation of body (whole expression evaluates to body)
expression1 == expression2		//evaluates to 1 if expressions are equal, otherwise 0
array@index 					//evaluates to what's held in array at index

lam [params]					//executes lambda with params as parameters
[contents]						//array with contents
				
lam [x..] = body				//lambda with variable number of parameters -- x is treated as array in body I.E. x[1] is second parameter (because arrays begin at 0)
[num1..num2]					//evaluates to array where array@0 is num1 and following elements are num1+index until num1+index <= num2 -- [1..4] = [1,2,3,4] -- [1.5..3] = [1.5, 2.5]

_[params] = body				/evaluates to anonymous lambda with parameters params
				
[a,b]							//array with 

[a,b..c]						//evaluates to array where array@0 is a and following elements are a+(b-a) until a+index <= c -- [1,1.1..1.5] = [1, 1.1, 1.2, 1.3, 1.4, 1.5]
[a,+b..c]						//evaluates to array where array@0 is a and following elements are a+b until a+index <= c -- [1,+.1..1.5] = [1, 1.1, 1.2, 1.3, 1.4, 1.5]

for arr@index: body 			//evaluates to a copy of arr where each element is evaluated to contents of body -- body has access to index

condition ? case1 : case2		//evaluates to case1 if condition is true, otherwise case2

//logic operators
a && b
a || b
a ^^ b
!a

---------------------------

keywords:

arr		//specifies typename to the left is an array of that type -- real arr

sizeof	//evaluates to number of elements in following array

istype	//evaluates to 1 if an expression is of specified type, 0 otherwise -- var is real

const	//makes following lexeme immutable -- const var = 4
mut	//makes following lexeme mutable -- mut a = [1,2,3] -- gives lambdas access to global variables, lambdas' definitions can't be changed
freeze  //changes properties of following array -- individual elements of the array are still mutable, but no elements can be taken away or added, and the type of each element is immutable

uses	//links the visible contents of a file or module -- uses <lib>

hidden  //hides the following lexeme from other files -- hidden var = 3 //var can only be directly acessed from this file

strict	//forces eager evaluation on following lambda or expression -- strict lam[params] = body //body will be evaluated asap -- strict 1+3

alias	//declares following typename as a new type equivilant to the preceding type -- int arr alias chars

---------------------------

types:

real	//single value on the "real" numberline -- accounts for decimal values
int 	//single integral value
lambda	//evaluates to body defined on decleration
amb     //ambiguous - umbrella type -- ambbiguous array can contain multiple types   

string	//an array of ints -- arr is implied


reals are mutable by default
ints are mutable by default
arrays are immutable by default
lambdas are immutable by default

//casting
[type] variable

//type alias
type alias newTypename

----------------------------

decleration and execution of lambdas:

//decleration
lam[params] = body		//declares lam as the evaluation of body with parameters params where body has access to params
lam[params..] = body	        //declares lam as a multiple parameter lambda where params is treated as an array in body -- params[1] is second parameter (because arrays begin at 0)
//NOTE: type optional before parameter name  (useful for avoiding bugs)
//NOTE: RESERVED FUNCTION NAMES: underscore, "operator" followed by an operator
//NOTE: body has access to params and other lambdas only - no global variables - exception if lambda is mutable

//execution
lam [params]			//executes lam with params as parameters
lam arr			        //pass array arr to lam where elements of arr will be treated as parameters - lam arr is equivilant to lam [1,2,3] if arr = [1,2,3]

//NOTE: lambda overloading supported
lam[a, b] = body
lam[real a, real arr b] = body

//operator overloading
operatorOp[leftOperand, rightOperand] = body
//example overloading plus:
operator+[a,b] = a*b

//anonymous lambda
_[params] = body

----------------------------

libraries:

uses <libName>

----------------------------

standard libs:

/////////////////////////
std (automatically used)

add [a1, a2]			//if length of a1 & a2 are equal: add[a1, a2] evaluates to a new array where array@i = a1@i + a2@i //if either a1 or a2 is a real, then that real is added to each element of the array
multiply [a1, a2]		//does the same as add, but multiplies elements instead of adding them

sum[a]					//evaluates to the sum of all elements in a
product[a]				//evaluates to the product of all elements in a

//NOTE: considering replacing concat with + operator//
concat[x,y]				//appends y to the end of x where x and y are both arrays
shift[a,n]				//shifts the elements of a by n places to the right (left if n is negative) (elements below 0 or above array length are wrapped) -- shift[ [1,2,3], 1 ] is evaluated to [3,1,2]

takeFrom[arr, a, b]		//Evaluates to arr between the indicies of a and b -- takefrom[[1,2,3,4,5], 1, 3] = [2,3,4]

exec[lam, params]		//executes a lambda lam with params being an array of parameters

log[msg]				//adds contents of msg to output, and evaluates to 0 (for now)
warn [msg, x]			//adds contents of msg to output as warning, and evaluates to x
err[msg]				//adds contents of msg to output, and terminates execution

//typical math //evalution is either the mathematical result of func[x] or an array where the mathematical function is applied to every element
sin[x]
cos[x]
tan[x]
arcsin[x]
arccos[x]
arctan[x]
arctan2[x,y]			//x and y must be equal length if arrays
sqrt[x]
pow[x]					//used for arrays b/c ** operator can't be applied to arrays

///////////////////////
graphics

//where a point is an array of any number of elements X Y Z W	(first 3 elements are divided by W, and the remaining elements are ignored)
plot[p..]				//draws circles for an array of points
trace[p..]				//draws lines between points for an array of points
fill[p..]				//fiils the space contained by points for a list of points

lineWidth[x]			//sets line width to x for drawing
pointSize[x]			//sets point size to x for drawing
color[r,g,b,a]			//sets rgba color for drawing
colorhsv[h, s, v, a]	//sets hsva color for drawing	



----------------------------

Everything is an expression:

//unclear cases
lam[params] = body					//evaluates to anonymous lambda which is equivilant to lam (for now)
something = expression				//evaluates to expression

----------------------------
*/

//theoretical vector implimentation--------------------------what i did to omit brackets for some lambdas might be bad practice

//! vector type
real arr alias vector

//! syntax Sugar for creating vectors
vec[real x..] = [vector] x

//! multiplies a vector v by a scalar value n
scalar[real n, vector v] = for v@i: v@i + n

//! add is overriden for vectors for completeness
add[vector v1, vector v2] = add[v1, v2]

//! subtracts v2 from v1
sub[vector v1, vector v2] = for v1@i: v1@i - v2@i

//! calculates the magnitude of v -- called on array of components of v, so square brackets can be ommited I.E. "magnitude v"
magnitude[component..] = sqrt[ sum[pow[v, 2]] ]

//! returns a unit vector with the same direction as v -- called on array of components of v, so square brackets can be ommited I.E. "normalize v"
normalize[components..] = scalar[1/magnitude components, vector[components]]

//! returns the real dot product of vectors v1 & v2
dot[vector v1, vector v2] = product[ add[v1,v2] ]

//! returns the real angle (in radians) between vectors v1 & v2
angle[vector v1, vector v2] = arccos[ dot[v1, v2] / ( magnitude v1 * magnitude v2 ) ]

//helper for following lamda
hidden appendCommas[v] = for v@i: concat[v@i, ","]
//! returns a string containing the values in v
peakContents[real components..] = concat["<", appendCommas[components], ">"]

//helpers for following lambda
hidden originOf[v] = for v@i: 0
hidden drawVec[v] = trace[originOf[v], v]
//! Draws an array of vecs
drawVecs[vector vecs..] = for vecs@i: drawVec[vecs@i]

//use of vectors

v1 = normalize vec[3,4]
drawVecs [v1]

someVectors = [vec[1,3],vec[4,3]]
drawVecs someVectors

drawVecs [vec[1,2],vec[*1.1,-1]..vec[5,-2]] //this might be hard to impliment


//currying----------------------------------------------------

add[a] = _[b] = a+b
add[3][4] //= 7

addThree = add[3]
addThree[4] //= 7


//lazy evaluation----------------------------------------------
addone[n] = concat[n, addone[n+1]]
allNumbers = addone[0]

takeFrom[allNumbers, 3, 7] // [3,4,5,6,7]


//other (TO BE ORGANIZED LATER)

//how?	
[1,2,3,4,5,6,7,8]
toPointArr: [(1,1),(2,2),(3,3),(4,4),(5,5),(6,6),(7,7),(8,8)]
toPointArr_inPlace: [(1,2),(2,4),(5,6),(7,8)]

//filter keyword - removes elements where body isn't true
filter v@i: v@i%2==0


/*integration with c/c++? (via macros) (captures via shared memory)

--cpp code--

VARCEL((varcel code), captures)

--cpp code--

*/

